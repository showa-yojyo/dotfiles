;;; -*- Mode: Lisp -*-
;;; Last updated: <2003/01/18 19:16:04 +0900>

(in-package "outline-tree")

;; バッファリストを表示
(add-hook '*olt-open-hook* 'olt-make-only-buffer-node-all-buffer)
(add-hook 'ed:*create-buffer-hook* 'olt-make-only-buffer-node)

;; バッファリストに表示しないバッファ名
;; 非表示バッファ全般
(pushnew "^ " *olt-except-buffer-name-regexp-list* :test 'equal)
;; KaTeX minibuffer
;(pushnew "^ \\*message\\*$" *olt-except-buffer-name-regexp-list* :test 'equal)
;; 2ch-mode 関連
(pushnew "^2ch: " *olt-except-buffer-name-regexp-list* :test 'equal)

;; ファイルを開くと同時にアウトライン作成
;(add-hook 'ed:*find-file-hooks* 'olt-make)

;; outline 時は paren.l を無効に (喜多さん paren.l)
;(when (fboundp 'ed::turn-on-paren)
;  (add-hook '*olt-make-hook* 'ed::turn-off-paren)
;  (add-hook '*olt-delete-hook* 'ed::turn-on-paren))

;; outline 時は行カーソル表示
;(defun set-local-cursor-line (&optional (value t))
;  (set-local-window-flags (selected-buffer)
;                          *window-flag-cursor-line* value))
;(defun unset-local-cursor-line ()
;  (set-local-cursor-line nil))
;(add-hook '*olt-make-hook* 'set-local-cursor-line)
;(add-hook '*olt-delete-hook* 'unset-local-cursor-line)



;;; 各モード設定 (autoload を行わない場合は (pushnew ...) の設定は不要)
;; Shinichi Sugiyama さん xml-mode.l
;(when (find-load-path "xml-mode")
;  (require "xml-mode")
;  (add-hook 'xml::*xml-mode-hook* 'olt-setting-tag-mode)
;  (pushnew '(xml::xml-mode . olt-setting-tag-mode)
;           *olt-setting-alist* :test 'equal))

;; Maeda Manabu さん KaTeX
;(when (find-load-path "elisp")
;  (require "elisp")
;  (add-hook 'elisp::katex-mode-hook 'olt-setting-LaTeX-mode)
;  (pushnew '(elisp::katex-mode . olt-setting-LaTeX-mode)
;           *olt-setting-alist* :test 'equal))

;; YMTZ さん html+-mode.l
(when (find-load-path "html+-mode")
  (require "html+-mode")
  (add-hook 'ed::*html+-mode-hook* 'olt-setting-html-mode)
  (pushnew '(ed::html+-mode . olt-setting-html-mode)
           *olt-setting-alist* :test 'equal))

;; ini-mode.l
(when (find-load-path "ini-mode")
  (require "ini-mode")
  (add-hook 'ed::*ini-mode-hook* 'olt-setting-ini-mode)
  (pushnew '(ed::ini-mode . olt-setting-ini-mode)
           *olt-setting-alist* :test 'equal))

;; bat-mode.l
(when (find-load-path "bat-mode")
  (require "bat-mode")
  (add-hook 'ed::*bat-mode-hook* 'olt-setting-bat-mode)
  (pushnew '(ed::bat-mode . olt-setting-bat-mode)
           *olt-setting-alist* :test 'equal))

(defun olt-make-regexp-sns-mode (root-hitem)
  (olt-make-regexp-internal
   :root-hitem root-hitem
   :layer-regexp-list '("^\\.\\{1\\}\\(?:routine\\|label\\|dataarea\\)[ \t]*\\([^\\.\n].*?\\)[ \t]*$"
						"^\\.\\{2\\}\\(?:routine\\|label\\|dataarea\\)[ \t]*\\([^\\.\n].*?\\)[ \t]*$"
						"^\\.\\{3\\}\\(?:routine\\|label\\|dataarea\\)[ \t]*\\([^\\.\n].*?\\)[ \t]*$"
						"^\\.\\{4\\}\\(?:routine\\|label\\|dataarea\\)[ \t]*\\([^\\.\n].*?\\)[ \t]*$"
						"^\\.\\{5\\}\\(?:routine\\|label\\|dataarea\\)[ \t]*\\([^\\.\n].*?\\)[ \t]*$"
						"^\\.\\{6\\}\\(?:routine\\|label\\|dataarea\\)[ \t]*\\([^\\.\n].*?\\)[ \t]*$"
						"^\\.\\{7\\}\\(?:routine\\|label\\|dataarea\\)[ \t]*\\([^\\.\n].*?\\)[ \t]*$"
						"^\\.\\{8\\}\\(?:routine\\|label\\|dataarea\\)[ \t]*\\([^\\.\n].*?\\)[ \t]*$"
						"^\\.\\{9\\}\\(?:routine\\|label\\|dataarea\\)[ \t]*\\([^\\.\n].*?\\)[ \t]*$"
						"^\\.\\{10\\}\\(?:routine\\|label\\|dataarea\\)[ \t]*\\([^\\.\n].*?\\)[ \t]*$")
   :layer-regexp-list-case-fold nil
   :layer-regexp-list-order :non-miss))
(unless (member 'olt-make-regexp-sns-mode *olt-make-function-alist* :key 'cdr)
  (setq *olt-make-function-alist*
        (nconc *olt-make-function-alist*
               '(("* 階層付きsns" . olt-make-regexp-sns-mode)))))

(defun olt-setting-sns-mode ()
  (setq *olt-make-function* 'olt-make-regexp-sns-mode))

(when (find-load-path "sns/sns-mode")
  (require "sns/sns-mode")
  (add-hook 'ed:*sns-mode-hook* 'olt-setting-sns-mode)
  (pushnew '(ed::sns-mode . olt-setting-sns-mode)
		   *olt-setting-alist* :test 'equal))

;; Lisp ファイル (コメント)
;(delete-hook 'ed:*lisp-mode-hook* 'olt-setting-lisp-mode)
;(delete-hook 'ed:*lisp-interaction-mode-hook* 'olt-setting-lisp-mode)
;(add-hook 'ed:*lisp-mode-hook* 'olt-setting-lisp-mode-comment)
;(add-hook 'ed:*lisp-interaction-mode-hook* 'olt-setting-lisp-mode-comment)
;(pushnew '(ed:lisp-mode . olt-setting-lisp-mode-comment)
;         *olt-setting-alist* :test 'equal)
;(pushnew '(ed:lisp-interaction-mode . olt-setting-lisp-mode-comment)
;         *olt-setting-alist* :test 'equal)

;; このファイルで *olt-setting-alist* に設定した内容を既存のバッファに適用
(olt-init-setting)
