# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[[ "$-" != *i* ]] && return

# Honor XDG_*_HOME
# See XDG Base Directory Specification
# <https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html>
export XDG_DATA_HOME=$HOME/.local/share
export XDG_CONFIG_HOME=$HOME/.config
export XDG_STATE_HOME=$HOME/.local/state
export XDG_CACHE_HOME=$HOME/.cache

# History Options

# Make bash append rather than overwrite the history on disk
shopt -s histappend

# When a history substitution fails, grant a chance to edit the failed history
# substitution.
shopt -u histreedit

# Do not the results of history substitution immediately pass to the shell
# parser.
shopt -s histverify

# multi-line commands are saved to the history with embedded newlines rather
# than using semicolon separators where possible.
shopt -s lithist

# Don't put duplicate lines or lines starting with space in the history. See
# bash(1) for more options
HISTCONTROL="ignoreboth"

# Ignore some controlling instructions
# The '&' is a special pattern which suppresses duplicate entries.
HISTIGNORE=$'[ \t]*:&:?:[fb]g:hibernate*:exit:which.+'

# change ~/.bash_history
HISTFILE="$XDG_STATE_HOME/bash_history"

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# %F %T, or %+4Y-%m-%d %H:%M:%S
HISTTIMEFORMAT="%F %T "

# Shell Options
#
# See man bash for more options...

# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# When changing directory small typos can be ignored by bash
# for example, cd /vr/lgo/apaache would find /var/log/apache
shopt -s cdspell dirspell

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Comment out so that WSLg works fine
#if [[ -f /etc/resolv.conf ]]; then
#    export DISPLAY=$(grep -oP "(?<=nameserver ).+" /etc/resolv.conf):0.0
#    export XDG_RUNTIME_DIR=/tmp/xdg-runtime
#    export RUNLEVEL=3
#fi

case "$OSTYPE" in
    cygwin | msys)
        export BROWSER=cygstart
        ;;
    linux-gnu)
        if [[ -n "$WSL_DISTRO_NAME" ]]; then
            export BROWSER=wslview
        fi
        ;;
esac

export EDITOR='code --wait' # --new-window

# FCEDIT: the default editor for the fc builtin command.
FCEDIT=$EDITOR

# Git

# cf. EDITOR, VISUAL; core.editor in .gitconfig
export GIT_EDITOR=$EDITOR

# See .git-prompt.sh
# Show unstaged (*) and staged (+) changes.
GIT_PS1_SHOWDIRTYSTATE="yes"

# Show if currently something is stashed.
GIT_PS1_SHOWSTASHSTATE="yes"

# Show if there're untracked files.
#GIT_PS1_SHOWUNTRACKEDFILES=

# Show the difference between HEAD and its upstream.
GIT_PS1_SHOWUPSTREAM="verbose"

# Specify the separator between the branch name and the state symbol.
#GIT_PS1_STATESEPARATOR=" "

# Show more information about the identity of commits checked out as a
# detached HEAD.
#GIT_PS1_DESCRIBE_STYLE="default"

# Enable a colored hint about the current dirty state.
GIT_PS1_SHOWCOLORHINTS="yes"

# Make __git_ps1 to do nothing in the case when the current directory is set
# up to be ignored by git.
#GIT_PS1_HIDE_IF_PWD_IGNORED=

declare git_tool_home="$XDG_CONFIG_HOME/git"
for f in git-prompt.sh git-completion.sh;
do
    test -f "$git_tool_home/$f" && source "$git_tool_home/$f"
done
unset f git_tool_home

# SSH
# For detailed information, see <https://www.funtoo.org/Funtoo:Keychain>.
eval $(keychain --agents ssh --eval id_ed25519)

# Readline
#
# INPUTRC: initialization file
INPUTRC="$XDG_CONFIG_HOME/readline/inputrc"

# Locale
#
# LANG: the locale category for any category not specifically selected with a
# variable starting with LC_. export LANG=ja_JP.UTF-8
export LANG=C.UTF-8

# LC_ALL: overrides the value of LANG and any other LC_ variable specifying a
# locale category.
export LC_ALL=C.UTF-8

# less
#
# LESSHISTFILE: if set to "-" or "/dev/null", a history file is not used. The
# default is "$XDG_DATA_HOME/lesshst" or "$HOME/.lesshst".
export LESSHISTFILE=-

# AWS
# <https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html>
# <https://github.com/aws/aws-sdk/issues/30>
export AWS_CONFIG_FILE="$XDG_CONFIG_HOME/aws/config"
export AWS_CLI_HISTORY_FILE="$XDG_DATA_HOME/aws/history"
export AWS_CREDENTIALS_FILE="$XDG_DATA_HOME/aws/credentials"
export AWS_WEB_IDENTITY_TOKEN_FILE="$XDG_DATA_HOME/aws/token"
export AWS_SHARED_CREDENTIALS_FILE="$XDG_DATA_HOME/aws/shared-credentials"

# Azure CLI
export AZURE_CONFIG_DIR="$XDG_DATA_HOME/azure" # not XDG_CONFIG_HOME?

# Docker
# <https://docs.docker.com/engine/reference/commandline/cli/>
export DOCKER_CONFIG="$XDG_CONFIG_HOME/docker"
export DOCKER_HIDE_LEGACY_COMMANDS=hide

# Kubernetes
export KUBECONFIG="$XDG_CONFIG_HOME/kube"
export KUBECACHEDIR="$XDG_CACHE_HOME/kube"

# Minikube
# Creates a further .minikube directory in MINIKUBE_HOME for whatever reason.
export MINIKUBE_HOME="$XDG_DATA_HOME/minikube"

# Rust
export CARGO_HOME="$XDG_DATA_HOME/cargo"
export RUSTUP_HOME="$XDG_DATA_HOME/rustup"
[ -s "$CARGO_HOME/env" ] && source "$CARGO_HOME/env"

# Ruby Gems bundler
export BUNDLE_USER_CONFIG="$XDG_CONFIG_HOME/bundle"
export BUNDLE_USER_PLUGIN="$XDG_DATA_HOME/bundle"
export BUNDLE_USER_CACHE="$XDG_CACHE_HOME/bundle"

# XDG_CONFIG_HOME/gemrc

# XDG_CONFIG_HOME/irb
export IRBRC="$XDG_CONFIG_HOME/irb/irbrc"

export GEM_HOME="$XDG_DATA_HOME/gem"
export GEM_SPEC_CACHE="$XDG_CACHE_HOME/gem"

# XDG_DATA_HOME/rdoc

# MySQL
export MYSQL_HISTFILE="$XDG_STATE_HOME/mysql_history"

# Node.js
export NODE_REPL_HISTORY="$XDG_STATE_HOME/node_repl_history"

# npm
export NPM_CONFIG_USERCONFIG="$MY_CONFIG_HOME/npm/npmrc"

# NuGet (only ~/.nuget/packages)
export NUGET_PACKAGES="$XDG_CACHE_HOME/NuGetPackages"

# Oh My Posh
export POSH_THEME="$XDG_CONFIG_HOME/oh-my-posh.json"

# PostgreSQL
export PSQLRC="$XDG_CONFIG_HOME/postgresql/psqlrc"
export PSQL_HISTORY="$XDG_STATE_HOME/postgresql/psql_history"

# PulseAudio
export PULSE_COOKIE="$XDG_CACHE_HOME/pulse/cookie"

# Pylint
export PYLINTHOME="$XDG_CACHE_HOME/pylint"
export PYLINTRC="$XDG_CONFIG_HOME/pylint/pylintrc"

# Python
export PYTHON_HISTORY="$XDG_STATE_HOME/python/history"
export PYTHONPYCACHEPREFIX="$XDG_CACHE_HOME/python"
export PYTHONSTARTUP="$XDG_CONFIG_HOME/python/pythonrc.py"
export PYTHONUSERBASE="$XDG_DATA_HOME/python"

# IPython and Jupyter
# <https://github.com/jupyter/notebook/issues/2374#issuecomment-551765192>
export IPYTHONDIR="$XDG_CONFIG_HOME/ipython"
export JUPYTER_CONFIG_DIR="$XDG_CONFIG_HOME/jupyter"

# Matplotlib
export MATPLOTLIBRC="$XDG_CONFIG_HOME/matplotlib"

# SQLite
export SQLITE_HISTORY="$XDG_STATE_HOME/sqlite_history"

# Vim
export VIMINIT='let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc" | source $MYVIMRC'

# wget
export WGETRC="$XDG_CONFIG_HOME/wgetrc"

# TMP and TEMP are defined in the Windows environment.  Leaving
# them set to the default Windows temporary directory can have
# unexpected consequences.
# Alternatively, set them to the Cygwin temporary directory
# or to any other tmp directory of your choice
case "$OSTYPE" in
    cygwin | msys)
        unset TMP TEMP
        export TMP=/tmp TEMP=/tmp
        TMPDIR=/tmp
        ;;
    *) ;;
esac

# Alias and functions.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
declare bash_config_home="$XDG_CONFIG_HOME/bash"
for f in bash_aliases bash_functions; do
    if [ -f "$bash_config_home/$f" ]; then
        source "$bash_config_home/$f"
    else
        source "$HOME/$f"
    fi
done
unset f bash_config_home

# >>> conda initialize >>>
declare __conda_home="$XDG_DATA_HOME/miniconda3"
declare __conda_setup="$($__conda_home/bin/conda shell.bash hook 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$__conda_home/etc/profile.d/conda.sh" ]; then
        source "$__conda_home/etc/profile.d/conda.sh"
    else
        PATH="$__conda_home/bin:$PATH"
    fi
fi
unset __conda_setup __conda_home
conda activate python-3.12
# <<< conda initialize <<<

# Enable Oh My Posh
if [ -x "$(command -v oh-my-posh)" ]; then
    eval "$(oh-my-posh init bash)"

    # <https://stackoverflow.com/questions/78652215/>
    function set_poshcontext() {
        # export CURRENT_HISTORY_NUMBER=$(history -n ${HISTFILE}; history 1 | cut -f2 -d$" ")
        export CURRENT_HISTORY_NUMBER=$(history 1 | cut -f2 -d$" ")
    }
    export -f set_poshcontext
fi

# Enable Pipenv completion
[ -x "$(command -v pipenv)" ] && eval "$(_PIPENV_COMPLETE=bash_source pipenv)"

# Enable Hatch completion
[ -x "$(command -v hatch)" ] && eval "$(_HATCH_COMPLETE=bash_source hatch)"

# Enable Ruff completion
[ -x "$(command -v ruff)" ] && eval "$(ruff generate-shell-completion bash)"

# WIP
nvm() {
    unset -f nvm

    # Use XDG_DATA_HOME instead of XDG_CONFIG_HOME
    export NVM_DIR="$XDG_DATA_HOME/nvm"

    # want to manually run `nvm use`
    [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh" --no-use
    [ -s "$NVM_DIR/bash_completion" ] && source "$NVM_DIR/bash_completion"
    # run the authentic nvm
    nvm $@
}
